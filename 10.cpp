#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;
int main() {
/*	double x,p,r;
	cout<<"本金？存几年？利率？"<<endl; 
	cin>>x>>p>>r;
	cout<<"存"<<p<<"年后的本利为："<<fixed<<setprecision(2)<<x*pow(p,(1+r/100))<<"元"<<endl;
	
	int a,b,c;
	cout<<"三块石头的重量？"<<endl;
	cin>>a>>b>>c;
	cout<<"他应该再捡一块重量为"<<20-a-b-c<<"斤的石头"<<endl;  */
	
	double a,b,r;
	cin>>a>>b;
	r=a-int(a/b)*b;
	cout<<"a除以b的余数是："<<r<<endl;
	
	return 0;
}
/*  setprecision(_)： 
	1，当与fixed一起使用时，setprecision(_)指定小数点后应显示的位数
    2，当与scientific一起使用时，setprecision(_)指定整个数字
	（包括小数点前和小数点后的部分以及指数）中应显示的总位数。
	
	------------+-------------------+----------+-------------------------------------
	数据类型    |类型标识符         |所占字节数|取值范围
	------------+-------------------+----------+-------------------------------------
	短整型      |short[int]         |2         |-32768--32767
	无符号短整型|unsigned short[int]|2         |0--65535
	整型        |int                |4         |-2147483648--2147483648
	无符号整型  |unsigned int       |4         |0--4294967295
	长整型      |long long          |8         |-2^63--2^63-1
	无符号长整型|unsigned long long |8	       |0--2^64-1
	单精度浮点数|float              |4		   |-3.4E+38--3.4E+38（7位有效数字）
	双精度浮点数|double             |8         |-1.79E+308--1.79E+308（15位有效数字）
	高精度浮点数|long double        |12		   |-3.4E-4932--1.1E+4932（19位有效数字）
	字符型      |char               |1		   |-128-127
	            |signed char        |1	       |0-255
	布尔型      |bool               |1	       |0/1
	------------+-------------------+----------+-------------------------------------
	表中“所占字节数”表示储存器分配给对应类型的空间大小
	若在运算中超出了对应数据类型的数值范围，会造成数据的溢出错误
	注：表中3.4E+38=3.4*10^38  */ 
